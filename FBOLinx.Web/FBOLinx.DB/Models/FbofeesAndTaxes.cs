// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;

namespace FBOLinx.DB.Models
{
    [Table("FBOFeesAndTaxes")]
    public partial class FboFeesAndTaxes
    {
        [Key]
        [Column("OID")]
        public int Oid { get; set; }
        [Column("FBOID")]
        public int Fboid { get; set; }
        [StringLength(100)]
        public string Name { get; set; }
        public FBOLinx.Core.Enums.FeeCalculationTypes? CalculationType { get; set; }
        public double Value { get; set; }
        public FBOLinx.Core.Enums.FlightTypeClassifications? FlightTypeClassification { get; set; }
        public FBOLinx.Core.Enums.ApplicableTaxFlights? DepartureType { get; set; }
        public FBOLinx.Core.Enums.FeeCalculationApplyingTypes? WhenToApply { get; set; }

        [NotMapped]
        public bool IsOmitted { get; set; }

        [NotMapped]
        public string OmittedFor { get; set; }

        #region Relationships
        [InverseProperty("FboFeeAndTax")]
        public List<FboFeeAndTaxOmitsByCustomer> OmitsByCustomer { get; set; }

        [InverseProperty("FboFeeAndTax")]
        public List<FboFeeAndTaxOmitsByPricingTemplate> OmitsByPricingTemplate { get; set; }
        #endregion

        public double GetCalculatedValue(double basePrice, double allInPrice)
        {
            if (CalculationType == FBOLinx.Core.Enums.FeeCalculationTypes.FlatPerGallon)
                return Value;
            if (CalculationType == FBOLinx.Core.Enums.FeeCalculationTypes.Percentage)
                return (((Value / 100.0)) * basePrice);
            if (CalculationType == FBOLinx.Core.Enums.FeeCalculationTypes.PercentageOfTotal)
                return (((Value / 100.0)) * allInPrice);
            return Value;
        }
        public bool IsBelowTheLine()
        {
            return this.WhenToApply == Core.Enums.FeeCalculationApplyingTypes.PostMargin;
        }
        public void SetIsOmittedForPricing(int pricingTemplateId,bool isRetailMinus = false)
        {
            Func<FboFeeAndTaxOmitsByPricingTemplate, bool> query = o => o.FboFeeAndTaxId == this.Oid && o.PricingTemplateId == pricingTemplateId;

            var includeOmit = this.OmitsByPricingTemplate.Any(query);
            this.IsOmitted = (isRetailMinus && this.IsBelowTheLine()) ?
            (!includeOmit) ? true : this.OmitsByPricingTemplate.Where(query).FirstOrDefault()?.IsOmitted ?? true :
            includeOmit;
            if (this.IsOmitted)
                this.OmittedFor = "P";
        }
        public void SetIsomittedForCustomer(int customerId,bool isRetailMinus = false)
        {
            Func<FboFeeAndTaxOmitsByCustomer, bool> query = o => o.CustomerId == customerId;

            var includeOmit = this.OmitsByCustomer.Any(query);

            this.IsOmitted = (isRetailMinus && this.IsBelowTheLine()) ?
            (!includeOmit) ? true : this.OmitsByCustomer.Where(query).FirstOrDefault()?.IsOmitted ?? true :
            includeOmit;

            if (this.IsOmitted)
                this.OmittedFor = "C";
        }
    }
}